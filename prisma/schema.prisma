generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Organization {
    id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name               String               @db.VarChar(255)
    owner_user_id      String?
    created_at         DateTime?            @default(now()) @db.Timestamptz(6)
    updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
    User               User?                @relation(fields: [owner_user_id], references: [id], onUpdate: NoAction, map: "fk_owner_user")
    OrganizationMember OrganizationMember[]
    Project            Project[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model OrganizationMember {
    id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    organization_id String       @db.Uuid
    user_id         String
    role            String       @db.VarChar(50)
    joined_at       DateTime?    @default(now()) @db.Timestamptz(6)
    Organization    Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization")
    user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

    @@unique([organization_id, user_id])
}

model Project {
    id                 String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    organization_id    String       @db.Uuid
    created_by_user_id String?
    name               String       @db.VarChar(255)
    description        String?
    created_at         DateTime?    @default(now()) @db.Timestamptz(6)
    updated_at         DateTime?    @default(now()) @db.Timestamptz(6)
    User               User?        @relation(fields: [created_by_user_id], references: [id], onUpdate: NoAction, map: "fk_created_by_user")
    Organization       Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization")

    Tool            Tool[]
    systemPromptId  String?           @db.Uuid
    ApiKeyOnProject ApiKeyOnProject[]
}

model Tool {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    project_id  String   @db.Uuid
    name        String   @unique
    description String?
    prompt      String   @db.Text
    args        Json?
    is_active   Boolean  @default(true)
    created_at  DateTime @default(now()) @db.Timestamptz(6)
    updated_at  DateTime @default(now()) @db.Timestamptz(6)

    Project Project @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_prompt_project")

    @@index([project_id])
}

model ApiKey {
    id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    key        String            @unique @db.Text
    name       String            @db.VarChar(255)
    user_id    String            @map("userId")
    created_at DateTime          @default(now()) @map("createdAt") @db.Timestamptz(6)
    updated_at DateTime          @default(now()) @map("updatedAt") @db.Timestamptz(6)
    user       User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
    projects   ApiKeyOnProject[]
}

model ApiKeyOnProject {
    api_key     ApiKey   @relation(fields: [api_key_id], references: [id], onDelete: Cascade)
    api_key_id  String   @map("apiKeyId") @db.Uuid
    project     Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
    project_id  String   @map("projectId") @db.Uuid
    assigned_at DateTime @default(now()) @map("assignedAt") @db.Timestamptz(6)

    @@id([api_key_id, project_id])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String               @id @default(cuid())
    name                   String?
    email                  String?              @unique
    emailVerified          DateTime?
    image                  String?
    password               String? // Added for email/password authentication
    reset_password_token   String?              @map("resetPasswordToken")
    reset_password_expires DateTime?            @map("resetPasswordExpires")
    Account                Account[]
    Organization           Organization[]
    OrganizationMember     OrganizationMember[]
    Project                Project[]
    Session                Session[]
    ApiKey                 ApiKey[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
